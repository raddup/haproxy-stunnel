If you're unable to set up port forwarding on your local PC due to a NATed router, you can still use HAProxy as a reverse proxy in combination with a VPN or a reverse tunneling tool like stunnel. The following steps will guide you through setting up a secure reverse proxy using HAProxy and stunnel:

Set up stunnel on both the local PC and the remote server:

a. Download and install stunnel for Windows on your local PC from the official website: https://www.stunnel.org/downloads.html

b. Install stunnel on the remote server using the package manager. For example, on a Debian-based system, use the following command:

arduino
Copy code
sudo apt-get install stunnel
Configure stunnel:

a. On your local PC, create a new text file named stunnel.conf with the following content:

makefile
Copy code
[local_service]
client = yes
accept = 127.0.0.1:local_tunnel_port
connect = remote_server_ip:remote_tunnel_port
Replace local_tunnel_port with an unused local port, remote_server_ip with the remote server's IP address, and remote_tunnel_port with an unused port on the remote server.

b. On the remote server, create or edit the stunnel configuration file at /etc/stunnel/stunnel.conf and add the following content:

makefile
Copy code
[local_service]
client = no
accept = remote_tunnel_port
connect = 127.0.0.1:remote_port
cert = /path/to/cert.pem
key = /path/to/key.pem
Replace remote_tunnel_port with the same port used in the local PC's stunnel configuration, remote_port with the desired port on the remote server for HAProxy, and /path/to/cert.pem and /path/to/key.pem with the paths to your SSL certificate and private key files.

Start stunnel:

a. On your local PC, run the stunnel executable and specify the configuration file:

Copy code
stunnel.exe stunnel.conf
b. On the remote server, start the stunnel service:

bash
Copy code
sudo systemctl enable stunnel
sudo systemctl start stunnel
Set up HAProxy on the remote server as described in the previous response, but change the backend local_service configuration to use 127.0.0.1:remote_port instead of your local PC's IP address:

ruby
Copy code
backend local_service
    mode tcp
    server local_pc 127.0.0.1:remote_port
Replace remote_port with the desired port on the remote server specified in the stunnel configuration.

Restart the HAProxy service:

Copy code
sudo systemctl restart haproxy
Now, you should be able to access the service running on your local PC through the remote server's IP address and the remote_port you specified in the HAProxy configuration. The connection will be secure, as it is encrypted using stunnel and the SSL certificate.



First, set up stunnel as described in my previous response.

Configure HAProxy on the remote server:

a. Create or edit the HAProxy configuration file at /etc/haproxy/haproxy.cfg.

b. Add the following configuration to set up a reverse proxy from the remote server to your local PC:

bash
Copy code
global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    daemon

defaults
    log global
    mode tcp
    option tcplog
    option dontlognull
    timeout connect 5000
    timeout client 50000
    timeout server 50000

frontend main
    bind *:public_port
    mode tcp
    default_backend local_service

backend local_service
    mode tcp
    server local_pc 127.0.0.1:remote_tunnel_port
Replace public_port with the desired port on the remote server that you want to expose to the public, and remote_tunnel_port with the same port used in the remote server's stunnel configuration (the accept parameter).

Enable and start the HAProxy service:

bash
Copy code
sudo systemctl enable haproxy
sudo systemctl start haproxy
In this configuration, HAProxy listens on the public_port, and forwards incoming traffic to the local stunnel instance running on the remote server (127.0.0.1:remote_tunnel_port). The stunnel instance then encrypts the traffic and forwards it to the stunnel instance running on your local PC, which finally decrypts the traffic and sends it to the local service.

Remember that the local PC's stunnel instance must be running and properly configured for this setup to work.





